(ns tswift.core-test
  (:require [clojure.test :refer :all]
            [cmplx.core :refer :all]
            [tswift.core :refer :all]))

;; Samples are given at the bottom
(declare samples)

(deftest does-it-work?
  (testing "sending samples at it, seeing if it even sorta works"
    (let [options (->tswift-options 128)]
      (tswift.core/init options)
      )
    (time (dotimes [cnt (count samples)]
      (def cmplx-freq-bins (submit-sample (get samples cnt)))))
    (prn (str "Ran " (count samples) " samples"))
    (def mags
      (loop [cnt 0
             bins []]
        (if (< cnt (count cmplx-freq-bins))
          (recur (inc cnt) (conj bins (:r (get cmplx-freq-bins cnt))))
          bins)))
    (dotimes [cnt (/ (count mags) 2)]
      (prn (str cnt " : " (get mags cnt))))))


(def samples [
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              0 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 0
              9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9
              ])
